require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const { Bot, InputFile } = require("grammy");
const User = require("./models/User");
const PORT = process.env.PORT;
const path = require("path");

const app = express();

app.use(cors());
app.use(express.json());

// –í—ñ–¥–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
app.use(express.static(path.join(__dirname, "public")));

// –í—ñ–¥–¥–∞—î–º–æ index.html –ø—Ä–∏ –∑–∞—Ö–æ–¥—ñ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
app.get("/", (req, res) => {
	res.sendFile(path.join(__dirname, "public", "index.html"));
});

const bot = new Bot(process.env.BOT_API_KEY);

// üìå –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ MongoDB
mongoose
	.connect(process.env.MONGO_URI, {
		useNewUrlParser: true,
		useUnifiedTopology: true,
	})
	.then(() => console.log("‚úÖ Connected to MongoDB"))
	.catch((err) => console.error("‚ùå MongoDB connection error:", err));

// üìå –ö–æ–º–∞–Ω–¥–∞ /start
bot.command("start", async (ctx) => {
	await ctx.replyWithPhoto(new InputFile("./media/gcg_bcgrnd.jpg"), {
		caption: "Welcome to GCG_LAB",
	});
	const keyboard = {
		reply_markup: {
			keyboard: [
				[
					{
						text: "üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é",
						request_location: true,
					},
				],
			],
			resize_keyboard: true,
			one_time_keyboard: true,
		},
	};

	await ctx.reply(
		"–©–æ–± –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Ä–æ–±–æ—Ç—É, –ø–æ–¥—ñ–ª–∏—Å—è —Å–≤–æ—î—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é:",
		keyboard
	);

	const userData = {
		id: ctx.from.id,
		username: ctx.from.username || "No username",
		first_name: ctx.from.first_name,
		last_name: ctx.from.last_name || "",
		user_lang: ctx.from.language_code || "",
		is_premium: ctx.from.is_premium || false,
		is_bot: ctx.from.is_bot || false,
		location: ctx.from.location || "",
		country: ctx.from.country || "",
		ip: ctx.from.ip || "",
	};

	try {
		const existingUser = await User.findOne({ id: ctx.from.id });
		if (!existingUser) {
			const newUser = new User(userData);
			await newUser.save();
			console.log("‚úÖ New user added:", userData);
		} else {
			console.log("‚ÑπÔ∏è User already exists:", existingUser);
		}
	} catch (error) {
		console.error("‚ùå Error saving user:", error);
	}
});

// üìå –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on("message:location", async (ctx) => {
	const userId = ctx.from.id;
	const location = ctx.message.location;

	console.log(
		`üìç –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${location.latitude}, ${location.longitude}`
	);

	try {
		// 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ IP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
		const ipResponse = await fetch(`${process.env.SERVER_URL}/get-ip`);
		const ipText = await ipResponse.text();
		if (ipText.startsWith("<")) {
			throw new Error("‚ùå API –ø–æ–≤–µ—Ä–Ω—É–ª–æ HTML –∑–∞–º—ñ—Å—Ç—å JSON");
		} // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç
		console.log("üåç –í—ñ–¥–ø–æ–≤—ñ–¥—å API (IP):", ipText);

		let userIp = "";
		try {
			const ipData = JSON.parse(ipText); // –ü—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON
			userIp = ipData.ip || "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ IP";
			console.log(`üåç –û—Ç—Ä–∏–º–∞–Ω–æ IP: ${userIp}`);
		} catch (error) {
			console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON (IP-API):", error);
		}
		// const ipData = await ipResponse.json();
		// let userIp = ipData.ip || "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ IP";

		// 2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –∫—Ä–∞—ó–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
		const IP_KEY = process.env.API_KEY;
		const countryResponse = await fetch(
			`https://ipinfo.io/${userIp}/json?token=${IP_KEY}`
		);
		const countryText = await countryResponse.text();
		console.log("üìç –í—ñ–¥–ø–æ–≤—ñ–¥—å API (–∫—Ä–∞—ó–Ω–∞):", countryText);

		const countryData = JSON.parse(countryText);
		const userCountry = countryData.country || "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
		console.log(`üåç –í–∏–∑–Ω–∞—á–µ–Ω–∞ –∫—Ä–∞—ó–Ω–∞: ${userCountry}`);
		// const countryData = await countryResponse.json();

		// console.log("üìç –í—ñ–¥–ø–æ–≤—ñ–¥—å API:", countryData);

		// // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫—Ä–∞—ó–Ω–∞
		// let userCountry = countryData.country || "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ";

		// console.log(`üåç –í–∏–∑–Ω–∞—á–µ–Ω–∞ –∫—Ä–∞—ó–Ω–∞: ${userCountry}`);

		// 4Ô∏è‚É£ –û–Ω–æ–≤–ª—é—î–º–æ MongoDB
		const updatedUser = await User.findOneAndUpdate(
			{ id: userId },
			{
				$set: {
					"location.latitude": location.latitude,
					"location.longitude": location.longitude,
					country: userCountry,
					ip: userIp,
				},
			},
			{ new: true, upsert: true }
		);

		console.log("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î:", updatedUser);

		// 5Ô∏è‚É£ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
		await ctx.reply(`‚úÖ –í–∞—à–∞ –∫—Ä–∞—ó–Ω–∞: ${userCountry}\nüñ• –í–∞—à IP: ${userIp}`);
	} catch (error) {
		console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è IP/–∫—Ä–∞—ó–Ω–∏:", error);
		await ctx.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –∫—Ä–∞—ó–Ω–∏ —Ç–∞ IP.");
	}
});

bot.on("message", async (ctx) => {
	await ctx.reply(`Hello, ${ctx.from.first_name}! Your ID: ${ctx.from.id}`);
});

// üìå API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —é–∑–µ—Ä—ñ–≤ (–¥–ª—è —Å–∞–π—Ç—É)
app.get("/", (req, res) => {
	res.send("Server is running!");
});
app.get("/api/users", async (req, res) => {
	try {
		const users = await User.find({}); // –§—ñ–ª—å—Ç—Ä —á–µ—Ä–µ–∑ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏
		res.json(users);
	} catch (error) {
		console.error("‚ùå Error fetching users:", error);
		res.status(500).json({ error: "Internal Server Error" });
	}
});

// –û—Ç—Ä–∏–º—É—î–º–æ IP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get("/get-ip", (req, res) => {
	let userIp =
		req.headers["x-forwarded-for"]?.split(",")[0] || // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π IP –∑—ñ —Å–ø–∏—Å–∫—É
		req.socket?.remoteAddress ||
		"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ IP";

	console.log(`üåç –†–µ–∞–ª—å–Ω–∏–π IP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userIp}`);
	res.json({ ip: userIp });
});

// app.get("/get-ip", (req, res) => {
// 	let userIp = req.headers["x-forwarded-for"] || req.socket.remoteAddress;

// 	// –í–∏–¥–∞–ª—è—î–º–æ IPv6 –ø—Ä–µ—Ñ—ñ–∫—Å, —è–∫—â–æ —î
// 	if (userIp.includes(",")) {
// 		userIp = userIp.split(",")[0]; // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π IP —É —Å–ø–∏—Å–∫—É
// 	}
// 	userIp = userIp.replace("::ffff:", "").replace("::1", "127.0.0.1"); // –í–∏–¥–∞–ª—è—î–º–æ ::ffff:

// 	console.log(`üåç –û—Ç—Ä–∏–º–∞–Ω–æ IP: ${userIp}`);
// 	res.json({ ip: userIp });
// });

// –û—Ç—Ä–∏–º—É—î–º–æ –∫—Ä–∞—ó–Ω—É –∑–∞ IP
app.get("/get-location", async (req, res) => {
	try {
		const userIp = req.headers["x-forwarded-for"] || req.socket.remoteAddress;
		console.log(`üåç –ó–∞–ø–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è IP: ${userIp}`);

		const response = await fetch(`https://ipapi.co/${userIp}/json/`);
		const data = await response.json();

		if (data && data.country_name) {
			res.json({ country: data.country_name });
		} else {
			res.status(404).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—Ä–∞—ó–Ω—É" });
		}
	} catch (error) {
		console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—Ä–∞—ó–Ω–∏:", error);
		res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
	}
});

// üìå –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä Express —Ç–∞ Telegram-–±–æ—Ç–∞

app.listen(PORT, () => {
	console.log(`üöÄ Server running on http://localhost:${PORT}`);
	bot.start();
});
